// routes/customers.js
const express = require('express');
const router = express.Router();
const db = require('../config/db');


router.get('/', async (req, res) => {
  try {
    const [rows] = await db.execute('SELECT * FROM customers');
    
    if (rows.length > 0) {
      res.json(rows); // ‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
    } else {
      res.status(404).json({ message: 'No customers found' });
    }
  } catch (error) {
    console.error(error); // ‚úÖ Log error ‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug
    res.status(500).json({ message: error.message });
  }
});



router.get('/:id', async (req, res) => {
  try {
    const [rows] = await db.execute('SELECT * FROM customers WHERE customer_id = ?', [req.params.id]);
    if (rows.length > 0) {
      res.json(rows[0]);
    } else {
      res.status(404).json({ message: 'Customer not found' });
    }
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});



router.post('/register', async (req, res) => {
  const connection = await db.getConnection(); // üîπ ‡πÉ‡∏ä‡πâ connection ‡πÅ‡∏¢‡∏Å
  try {
    const { 
      customer: { first_name, last_name, phone, email, address },
      garden: { area_size, garden_type, special_requirements }
    } = req.body;
    
    await connection.beginTransaction(); // ‚úÖ ‡πÉ‡∏ä‡πâ connection.beginTransaction()
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    const [customerResult] = await connection.execute(
      'INSERT INTO customers (first_name, last_name, phone, email, address) VALUES (?, ?, ?, ?, ?)',
      [first_name, last_name, phone, email, address]
    );
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ß‡∏ô
    await connection.execute(
      'INSERT INTO garden_details (customer_id, area_size, garden_type, special_requirements) VALUES (?, ?, ?, ?)',
      [customerResult.insertId, area_size, garden_type, special_requirements]
    );
    
    await connection.commit(); // ‚úÖ ‡πÉ‡∏ä‡πâ connection.commit()
    res.status(201).json({ 
      message: 'Customer and garden details registered successfully',
      customer_id: customerResult.insertId
    });
  } catch (error) {
    await connection.rollback(); // ‚úÖ ‡πÉ‡∏ä‡πâ connection.rollback() ‡πÅ‡∏ó‡∏ô
    res.status(500).json({ message: error.message });
  } finally {
    connection.release(); // ‚úÖ ‡∏Ñ‡∏∑‡∏ô connection ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà pool
  }
});


router.put('/:id', async (req, res) => {
  const connection = await db.getConnection(); // ‡πÉ‡∏ä‡πâ connection ‡πÄ‡∏â‡∏û‡∏≤‡∏∞
  try {
    const customerId = req.params.id; // ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö `id` ‡∏à‡∏≤‡∏Å URL parameter
    const { 
      customer: { first_name, last_name, phone, email, address },
      garden: { area_size, garden_type, special_requirements }
    } = req.body; // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const [existingCustomer] = await connection.execute(
      'SELECT * FROM customers WHERE customer_id = ?', [customerId]
    );
    
    if (existingCustomer.length === 0) {
      return res.status(404).json({ message: 'Customer not found' });
    }

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô transaction
    await connection.beginTransaction();

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    await connection.execute(
      'UPDATE customers SET first_name = ?, last_name = ?, phone = ?, email = ?, address = ? WHERE customer_id = ?',
      [first_name, last_name, phone, email, address, customerId]
    );

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ß‡∏ô
    await connection.execute(
      'UPDATE garden_details SET area_size = ?, garden_type = ?, special_requirements = ? WHERE customer_id = ?',
      [area_size, garden_type, special_requirements, customerId]
    );
    
    // ‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ï‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    await connection.commit();

    res.status(200).json({ message: 'Customer and garden details updated successfully' });
  } catch (error) {
    await connection.rollback(); // ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    res.status(500).json({ message: error.message });
  } finally {
    connection.release(); // ‡∏Ñ‡∏∑‡∏ô connection ‡∏Å‡∏•‡∏±‡∏ö pool
  }
});




module.exports = router; // export router